package polldsl.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_OdpowiedzPojedyncza;
  private ConceptPresentation props_OdpowiedzWielokrotna;
  private ConceptPresentation props_Pytanie;
  private ConceptPresentation props_PytanieJednokrotnegoWyboru;
  private ConceptPresentation props_PytanieOtwarte;
  private ConceptPresentation props_PytanieWielokrotnegoWyboru;
  private ConceptPresentation props_Test;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.OdpowiedzPojedyncza:
        if (props_OdpowiedzPojedyncza == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OdpowiedzPojedyncza = cpb.create();
        }
        return props_OdpowiedzPojedyncza;
      case LanguageConceptSwitch.OdpowiedzWielokrotna:
        if (props_OdpowiedzWielokrotna == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OdpowiedzWielokrotna = cpb.create();
        }
        return props_OdpowiedzWielokrotna;
      case LanguageConceptSwitch.Pytanie:
        if (props_Pytanie == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Pytanie = cpb.create();
        }
        return props_Pytanie;
      case LanguageConceptSwitch.PytanieJednokrotnegoWyboru:
        if (props_PytanieJednokrotnegoWyboru == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Pytanie jednoktornego wyboru");
          cpb.presentationByName();
          props_PytanieJednokrotnegoWyboru = cpb.create();
        }
        return props_PytanieJednokrotnegoWyboru;
      case LanguageConceptSwitch.PytanieOtwarte:
        if (props_PytanieOtwarte == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Pytanie otwarte");
          cpb.presentationByName();
          props_PytanieOtwarte = cpb.create();
        }
        return props_PytanieOtwarte;
      case LanguageConceptSwitch.PytanieWielokrotnegoWyboru:
        if (props_PytanieWielokrotnegoWyboru == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Pytanie wielokrotnego wyboru");
          cpb.presentationByName();
          props_PytanieWielokrotnegoWyboru = cpb.create();
        }
        return props_PytanieWielokrotnegoWyboru;
      case LanguageConceptSwitch.Test:
        if (props_Test == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Test = cpb.create();
        }
        return props_Test;
    }
    return null;
  }
}
